@startuml "Class Diagram"
class Member <<Entity>>{
    +firstName: String
    +lastName: String
    +email: String
    +phone: Number
    +photo: Photo
    +measurements: [Measurement.type,Measurement.date]
    +creditcard: Number   
    -discount: Number
    +greet()
    +updateProfile()  
    +shareOnWall()     
    +findPT(startDate,endDate,location,sports) :[PT]
    +comment()    //push wall
    +bookPT(pt,price,creditcard,date,location,discount) //push order   
}

class PT<<Entity>>{
    +sports: Sports
    +certificate : [Documents]
    +usingBrand: String[]
    +sessionFee: Number
    +location: Location
    +stars: [Stars]
    -schedule: Calender
    +setDate(startDate,endDate)
    +setPrice(number)

}
class Calender<<Entity>>{
    +reservedDate: Date
    +freeDate: Date
}
class Wall<<Entity>>{
    +member: Member
    +description :String
    +location: Location
}
class Order<<Entity>>{
    +member: Member
    +PT:Member
    +price: Number
    +creditcard: member.creditcard
    +date: Date
    +location: Location
}

class BMI <<ValueObject>> {
    +type: String
    +value: Number
    +unit: String
}

class Documents<<Entity>>{
    +type: String
    +date: Date
    +description: String
    +value: Number
    +unit: String
    }

class Measurement <<ValueObject>>{
    +type: String
    +date: Date
    +value: Number
    +unit: String
    +description: String
}



interface Certificate <<ValueObject>>{
    +type: String
    +date: Date 
    +description: String 
}

enum Sports{
    CrossFit
    Yoga
    Pilates
    Fitness
}

class Location<<Entity>> {
    +coords: Number[]
    +name: String
}

class Admin {
    +moderateComments()
}

Admin -up-|> Member
BMI --* Measurement
Measurement --* Member
Certificate -up-|> Documents
Documents --*PT

Member o--> Location
Member --> PT
Member *-- Wall
Member *-- Order
PT *-- Order
PT*-- Calender
PT --* Sports


@enduml

